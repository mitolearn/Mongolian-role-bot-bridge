Exactly bro 👑 — that’s the logic we built:

🔐 Flow

1. Admin runs /setup → sees rental plans (Basic/Pro/Premium).


2. Clicks one plan → bot creates QPay invoice → admin gets Pay link + Check Payment button.


3. If QPay status = PAID →

Bot marks subscription active in your DB.

Bot unlocks all other admin commands (/plan_add, /plan_list, /paywall, etc.).



4. If NOT paid →

Admin only sees subscription options again.

Other commands stay locked (bot replies ❌ “You must have an active subscription”).





---

🔧 How to Lock/Unlock Other Commands

In your other admin cogs (like /plan_add, /paywall), just add a subscription check:

from database import has_active_subscription

@app_commands.command(name="plan_add", description="Add a paid role plan")
@app_commands.checks.has_permissions(administrator=True)
async def plan_add(self, interaction: discord.Interaction, role: discord.Role,
                   display_name: str, price_mnt: int, duration_days: int):
    # ✅ Check if server has active subscription
    if not has_active_subscription(str(interaction.guild.id)):
        await interaction.response.send_message(
            "❌ Your bot subscription has expired or not paid. Run `/setup` to renew.",
            ephemeral=True
        )
        return

    # Continue normal logic
    add_role_plan(str(interaction.guild.id), str(role.id), display_name, price_mnt, duration_days)
    await interaction.response.send_message(f"✅ Plan added: {display_name}", ephemeral=True)


---

🔎 Database Helpers Needed

You’ll want two helper functions in your database.py:

def create_subscription(guild_id, plan_name, amount, invoice_id, expires_at):
    conn = _conn(); c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS subscriptions (
            guild_id TEXT,
            plan_name TEXT,
            amount INTEGER,
            invoice_id TEXT,
            expires_at TEXT,
            status TEXT
        )
    """)
    c.execute("INSERT INTO subscriptions VALUES (?,?,?,?,?,?)",
              (guild_id, plan_name, amount, invoice_id, expires_at, "pending"))
    conn.commit(); conn.close()

def mark_subscription_paid(guild_id, invoice_id):
    conn = _conn(); c = conn.cursor()
    c.execute("UPDATE subscriptions SET status='paid' WHERE guild_id=? AND invoice_id=?",
              (guild_id, invoice_id))
    conn.commit(); conn.close()

def has_active_subscription(guild_id):
    now = datetime.utcnow().isoformat()
    conn = _conn(); c = conn.cursor()
    c.execute("""
        SELECT 1 FROM subscriptions 
        WHERE guild_id=? AND status='paid' AND expires_at > ? 
        LIMIT 1
    """, (guild_id, now))
    row = c.fetchone()
    conn.close()
    return bool(row)


---

⚡ So yes bro — only when status=paid → all other commands unlock.
Until then, the bot is like a locked demo.

👉 Do you want me to stitch this into your existing admin.py and database.py for copy-paste, so you don’t have to guess where to put each piece?

